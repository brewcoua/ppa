name: Update Remote

on:
  workflow_call:
    inputs:
      remote_url:
        type: string
        required: true
      pkg_name:
        type: string
        required: true
      max_versions:
        type: number
        default: 3
    secrets:
      GPG_PRIVATE_KEY:
        required: true
      GPG_PASSPHRASE:
        required: true

env:
  GIT_NAME: brewcoua-bot
  GIT_EMAIL: 151367391+brewcoua-bot@users.noreply.github.com

concurrency:
  group: update
  cancel-in-progress: false

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest

    outputs:
      latest: ${{ steps.latest.outputs.latest }}
      needs_update: ${{ steps.check.outputs.needs_update }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get latest version
        id: latest
        run: |
          LATEST=$(curl -SsI '${{ inputs.remote_url }}' | awk '/location/ {print $2}' | awk -F/ '{print $NF}' | tr -d '[:space:]')

          echo "latest=${LATEST}"
          echo "latest=${LATEST}" >> "$GITHUB_OUTPUT"

      - name: Check if the latest version is already here
        id: check
        working-directory: ubuntu/${{ inputs.pkg_name }}
        run: |
          export CURRENT=$(ls | sort -V | tail -n 1)
          if [ "$CURRENT" == "${{ steps.latest.outputs.latest }}" ]; then
            echo "The latest version is already here. (Current: $CURRENT, Latest: ${{ steps.latest.outputs.latest }})"
            echo "needs_update=false" >> "$GITHUB_OUTPUT"
          else
            echo "The latest version is not here yet. (Current: $CURRENT, Latest: ${{ steps.latest.outputs.latest }})"
            echo "needs_update=true" >> "$GITHUB_OUTPUT"
          fi

  update:
    name: Update
    runs-on: ubuntu-latest
    needs: check
    if: needs.check.outputs.needs_update == 'true'

    permissions:
      contents: write
      id-token: write
      pages: write

    environment:
      name: ppa.brewen.dev
      url: https://ppa.brewen.dev

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download the latest version
        working-directory: ubuntu/${{ inputs.pkg_name }}
        run: |
          wget '${{ inputs.remote_url }}' -O ${{ needs.check.outputs.latest }}

      - name: Clean up older versions
        working-directory: ubuntu/${{ inputs.pkg_name }}
        run: |
          ls -t | tail -n +$(( ${{ inputs.max_versions }} + 1 )) | xargs rm -rf

      - name: Import GPG
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git_user_signingkey: true
          git_commit_gpgsign: true

      - name: Update index
        working-directory: ubuntu
        run: |
          dpkg-scanpackages --multiversion . > Packages
          gzip -k -f Packages

          apt-ftparchive release . > Release
          gpg --default-key "${GIT_EMAIL}" -abs -o - Release > Release.gpg
          gpg --default-key "${GIT_EMAIL}" --clearsign -o - Release > InRelease

      - name: Push the latest version
        run: |
          git config --global user.name "${GIT_NAME}"
          git config --global user.email "${GIT_EMAIL}"

          git add .
          git commit -m "chore(deb): update ${{ inputs.pkg_name }} to ${{ needs.check.outputs.latest }}"
          git push

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
